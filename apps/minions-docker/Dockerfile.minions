# Multi-stage build for minions client with core functionality
FROM python:3.11-alpine AS builder

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install build dependencies including Rust for tiktoken
RUN apk add --no-cache \
    gcc \
    g++ \
    musl-dev \
    libffi-dev \
    openssl-dev \
    git \
    rust \
    cargo \
    linux-headers

# Set working directory
WORKDIR /app

# Upgrade pip and install Python dependencies needed for minions
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --user \
    # Core dependencies from original Dockerfile.minion
    flask>=2.0.0 \
    flask-cors>=3.0.0 \
    gunicorn>=20.0.0 \
    requests>=2.25.0 \
    openai>=1.0.0 \
    anthropic>=0.25.0 \
    tiktoken>=0.4.0 \
    mcp>=1.0.0 \
    aiohttp>=3.8.0 \
    pydantic>=2.0.0 \
    # Additional dependencies for minions functionality
    rank_bm25>=0.2.2 \
    numpy>=1.24.0

# Runtime stage
FROM python:3.11-alpine AS runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH="/root/.local/bin:$PATH"

# Install runtime dependencies including libgcc for tiktoken
RUN apk add --no-cache \
    curl \
    libgcc \
    libstdc++ \
    libgomp

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /root/.local /root/.local



# Copy the complete minions module for full functionality
COPY minions/__init__.py ./minions/
COPY minions/usage.py ./minions/
COPY minions/minions.py ./minions/
COPY minions/clients/base.py ./minions/clients/
COPY minions/clients/docker_model_runner.py ./minions/clients/
COPY minions/clients/openai.py ./minions/clients/
COPY minions/prompts/__init__.py ./minions/prompts/
COPY minions/prompts/minions.py ./minions/prompts/
COPY minions/utils/__init__.py ./minions/utils/
COPY minions/utils/chunking.py ./minions/utils/ 
COPY minions/utils/retrievers.py ./minions/utils/
COPY minions/utils/multimodal_retrievers.py ./minions/utils/
COPY minions/utils/conversation_history.py ./minions/utils/

# Replace the clients __init__.py with simplified version
COPY apps/minions-docker/clients_init_minimal.py ./minions/clients/__init__.py

# Copy the Docker app files
COPY apps/minions-docker/minions_http_server.py ./

# Create log directory
RUN mkdir -p minion_logs

# Expose port
EXPOSE 5000

# Environment variables with defaults
ENV REMOTE_MODEL_NAME="gpt-4o-mini"
ENV LOCAL_MODEL_NAME="ai/smollm2"
ENV LOCAL_BASE_URL="http://model-runner.docker.internal/engines/llama.cpp/v1"
ENV REMOTE_BASE_URL="http://model-runner.docker.internal/engines/openai/v1"
ENV MAX_ROUNDS="3"
ENV LOG_DIR="minion_logs"
ENV TIMEOUT="60"
ENV HOST="0.0.0.0"
ENV PORT="5000"
ENV USE_RETRIEVAL="false"
ENV REMOTE_PROVIDER="openai"
ENV LOCAL_PROVIDER="docker"

# Add the app root to Python path so minions package can be imported
ENV PYTHONPATH="/app:$PYTHONPATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Create entrypoint script
RUN printf '#!/bin/sh\n\
echo "Starting Minions Server with Core Functionality..."\n\
echo "Configuration:"\n\
echo "  REMOTE_MODEL_NAME: $REMOTE_MODEL_NAME"\n\
echo "  LOCAL_MODEL_NAME: $LOCAL_MODEL_NAME"\n\
echo "  LOCAL_BASE_URL: $LOCAL_BASE_URL"\n\
echo "  REMOTE_BASE_URL: $REMOTE_BASE_URL"\n\
echo "  MAX_ROUNDS: $MAX_ROUNDS"\n\
echo "  TIMEOUT: $TIMEOUT"\n\
echo "  HOST: $HOST"\n\
echo "  PORT: $PORT"\n\
echo "  LOG_DIR: $LOG_DIR"\n\
echo "  USE_RETRIEVAL: $USE_RETRIEVAL"\n\
echo "  REMOTE_PROVIDER: $REMOTE_PROVIDER"\n\
echo "  LOCAL_PROVIDER: $LOCAL_PROVIDER"\n\
echo ""\n\
echo "Available Features:"\n\
echo "  - Full Minions Protocol Support"\n\
echo "  - OpenAI and Docker Client Support"\n\
echo "  - BM25 Retrieval (rank_bm25)"\n\
echo "  - Basic Document Processing"\n\
echo ""\n\
if [ "$PRODUCTION" = "true" ]; then\n\
    echo "Running in production mode with gunicorn..."\n\
    exec gunicorn --bind $HOST:$PORT --workers 1 --timeout $TIMEOUT --worker-class sync minions_http_server:app\n\
else\n\
    echo "Running in development mode with Flask..."\n\
    exec python minions_http_server.py\n\
fi\n' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Use the entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"] 